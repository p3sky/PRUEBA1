import re

import exrex

#######################################
# MAIN CLASS
#######################################

class Rule:

    ########################################
    # BUILD REGEX FOR LATER MATCH
    ########################################

    def __init__(self, suffix, min_rem, base, exceptions):
        self.suffix = suffix
        self._suffix_regex = _make_regex(min_rem, self.suffix)
        self.base = base
        self._base_regex = _make_regex(min_rem, self.base)
        self._min_rem = min_rem # possibly not needed anymore?
        self.exceptions = exceptions


    def __hash__(self):
        return self.suffix + self.base + str(self._min_rem) + str(self.exceptions)


    ########################################
    # APPLY RULE FORWARD/BACKWARDS IF ABLE
    ########################################

    def try_regress(self, w):
        m = self._applies_regress(w)
        if m:
            word = self._suffix_regex.sub(self.base, w)
            words = _expand(word)
            return True, m.group(), words
        return False, None, [w]


    def try_generate(self, w):
        m = self._applies_generate(w)
        if m:
            word = self._base_regex.sub(self.suffix, w)
            words = _expand(word)
            # exceptions are words not generated by this rule
            words = [w for w in words if w not in self.exceptions]
            if words == []:
                # nope, wrong rule
                # e.g. from 'can' we don't get 'canela'
                return False, m.group(), [w]
            return True, m.group(), words
        return False, None, [w]


    #######################################
    # CHECK IF RULE CAN BE APPLIED
    #######################################

    def _applies_regress(self, w):
        return w not in self.exceptions \
          and self._suffix_regex.search(w)


    def _applies_generate(self, w):
        return self._base_regex.search(w)


#######################################
# REGEX AUX FUNCTIONS
#######################################

def _expand(w):
    # returns all words that may match the regex
    return exrex.generate(w)


def _make_regex(previous, main_string):
    return re.compile("(?<=" + '.'*previous + ")" + main_string + "$")